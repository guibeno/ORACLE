-- EXERCICIO 6

SELECT * FROM auth_user;
SELECT * FROM musica_musicasalva;
SELECT * FROM musica_musicasalva_playlistS;
SELECT * FROM musica_playlist;


CREATE SEQUENCE seq_musica_playlist1  -- criei esta sequencia, inicia no 1 e vai adicionando +1 a cada dado salvo, sera adicionada na logica de criar nova playlist, para nenhuma ter o mesmo id
START WITH 100
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE SEQUENCE seq_musicasalva_playlists1
START WITH 100
INCREMENT BY 1
NOCACHE;


CREATE OR REPLACE PACKAGE mydj AS  -- criacao do pacote
    FUNCTION id_do_usuario(nome_usuario IN VARCHAR2) RETURN NUMBER;  -- declaracao das funcões e procedures que irei fazer no package
    PROCEDURE criar_playlist(nome_usuario IN VARCHAR2, genero IN VARCHAR2);
END mydj;
    
CREATE OR REPLACE PACKAGE BODY mydj AS

    FUNCTION id_do_usuario(nome_usuario IN VARCHAR2) RETURN NUMBER IS
        id_usuario_final NUMBER;  -- variavel que sera retornada com o valor da busca
    BEGIN
        -- seleciona o id do usuario e salva em id_usuario_final
        -- a logica consiste em concatemar firt_name + ' ' + last_name, o espaço no meio é para receber como entrada o nome ex: guilherme dalmoro, e nao guilhermedalmoro, este dado deve ser igual ao nome_usuario
        SELECT a.id INTO id_usuario_final
        FROM auth_user a
        WHERE TRIM(a.first_name ||' '|| a.last_name) = nome_usuario;

        RETURN id_usuario_final;   -- retorna o dado
    END id_do_usuario;
    
    -------
    PROCEDURE criar_playlist(nome_usuario IN VARCHAR2,genero IN VARCHAR2)  -- criacao da procedure
    IS
        id_usuario_final NUMBER;  -- declaracao das variaveis
        id_playlist_criada NUMBER;
        CURSOR musicas(p_genero VARCHAR2) IS  -- a logica do cursor musicas é fazer um select de todos os ids onde, atraves do where identificamos o genero igual ao passado em parametro
            SELECT DISTINCT m.id  -- capta apenas id distintos, caso nao tenha a quantidade suficiente de musicas, noa duplica as musica que posteriormente serão salvas na playlist
            FROM musica_musicasalva m
            WHERE m.genero = p_genero
            ORDER BY DBMS_RANDOM.VALUE -- atraves do dbms_random, aleatoriamente a busca seleciona os ids, baseados nos generos
            FETCH FIRST 25 ROWS ONLY;  -- capta so os primeiros 25 resultados, pois precisa de 25 musicas para a playlist
        
    begin -- criacao do bloco principal
    
        id_usuario_final := id_do_usuario(nome_usuario); -- optei em receber os parametros todos na procedure, aqui chamo então a funcao passando o nome do usuario
        SELECT seq_musica_playlist1.NEXTVAL INTO id_playlist_criada FROM dual;  -- a sequencia que criei anteriormente salva o seu valor na variavel id_playlist_criada, a logica é para ter uuma variavel
                                                                            -- contante que servira para criar a playlist (id) e tambem sera o campo playlist_id quando inserir as musicas em musicasalva_playlist
                                                                            -- assim sera mantido a congruencia entre os dados

    
        INSERT INTO musica_playlist(id,nome,descricao,user_id) -- feito insert na tabela musica_playlist, da nova playlist generica do usuario, utilizei a id_playlist que criei e o id_usuario_final, que é o dado retornado -
        values(id_playlist_criada,'playlist generica', 'playlist generica do usuario', id_usuario_final); -- da funcao id_do_usuario
        
        DBMS_OUTPUT.PUT_LINE('playlist generica criada para usuário: ' || nome_usuario);

         FOR i IN musicas(genero) LOOP  -- criei um for onde passara por todas as musica baseadas no genero que esta salva no cursor musicas
                                -- a logica consiste em inserir todas as musicas selecionadas na tabela musicasalva_playlist, passado o id da musica buscada e o id da playlist criada como parametro
            INSERT INTO musica_musicasalva_playlists (id,musicasalva_id, playlist_id)
            VALUES (seq_musicasalva_playlists1.NEXTVAL,i.id, id_playlist_criada);
            DBMS_OUTPUT.PUT_LINE('musica adicionada id: ' || i.id);
        END LOOP;
        
        COMMIT;
    END criar_playlist;
    
END mydj;



BEGIN
    mydj.criar_playlist('joao joao', 'Rock');
END;


SELECT mydj.id_do_usuario('joao vitor') AS id_usuario FROM dual;















